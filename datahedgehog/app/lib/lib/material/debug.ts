/** Library asset:datahedgehog_monitor/lib/lib/material/debug.dart */
import {is,isNot,equals} from "@dart2ts/dart/_common";
import {defaultConstructor,namedConstructor,namedFactory,defaultFactory,DartClass,Implements,With,op,Op,OperatorMethods,DartClassAnnotation,DartMethodAnnotation,DartPropertyAnnotation,Abstract,AbstractProperty,int,bool,double,Omit} from "@dart2ts/dart/utils";
import * as _common from "@dart2ts/dart/_common";
import * as core from "@dart2ts/dart/core";
import * as async from "@dart2ts/dart/async";
import * as lib3 from "@dart2ts.packages/flutter/lib/src/widgets/framework";

export var debugCheckHasMaterial : (context : lib3.BuildContext) => boolean = (context : lib3.BuildContext) : boolean =>  {
    /* TODO (AssertStatementImpl) : assert (() {if (context.widget is! Material && context.ancestorWidgetOfExactType(Material) == null) {final StringBuffer message = StringBuffer(); message.writeln('No Material widget found.'); message.writeln('${context.widget.runtimeType} widgets require a Material ' 'widget ancestor.'); message.writeln('In material design, most widgets are conceptually "printed" on ' 'a sheet of material. In Flutter\'s material library, that ' 'material is represented by the Material widget. It is the ' 'Material widget that renders ink splashes, for instance. ' 'Because of this, many material library widgets require that ' 'there be a Material widget in the tree above them.'); message.writeln('To introduce a Material widget, you can either directly ' 'include one, or use a widget that contains Material itself, ' 'such as a Card, Dialog, Drawer, or Scaffold.'); message.writeln('The specific widget that could not find a Material ancestor was:'); message.writeln('  ${context.widget}'); final List<Widget> ancestors = <Widget> []; context.visitAncestorElements((Element element) {ancestors.add(element.widget); return true;}); if (ancestors.isNotEmpty) {message.write('The ancestors of this widget were:'); for (Widget ancestor in ancestors) message.write('\n  $ancestor');} else {message.writeln('This widget is the root of the tree, so it has no ' 'ancestors, let alone a "Material" ancestor.');} throw FlutterError(message.toString());} return true;}()); */;
    return true;
};
export var debugCheckHasMaterialLocalizations : (context : lib3.BuildContext) => boolean = (context : lib3.BuildContext) : boolean =>  {
    /* TODO (AssertStatementImpl) : assert (() {if (Localizations.of<MaterialLocalizations>(context, MaterialLocalizations) == null) {final StringBuffer message = StringBuffer(); message.writeln('No MaterialLocalizations found.'); message.writeln('${context.widget.runtimeType} widgets require MaterialLocalizations ' 'to be provided by a Localizations widget ancestor.'); message.writeln('Localizations are used to generate many different messages, labels,' 'and abbreviations which are used by the material library. '); message.writeln('To introduce a MaterialLocalizations, either use a ' ' MaterialApp at the root of your application to include them ' 'automatically, or add a Localization widget with a ' 'MaterialLocalizations delegate.'); message.writeln('The specific widget that could not find a MaterialLocalizations ancestor was:'); message.writeln('  ${context.widget}'); final List<Widget> ancestors = <Widget> []; context.visitAncestorElements((Element element) {ancestors.add(element.widget); return true;}); if (ancestors.isNotEmpty) {message.write('The ancestors of this widget were:'); for (Widget ancestor in ancestors) message.write('\n  $ancestor');} else {message.writeln('This widget is the root of the tree, so it has no ' 'ancestors, let alone a "Localizations" ancestor.');} throw FlutterError(message.toString());} return true;}()); */;
    return true;
};
export class properties {
}
