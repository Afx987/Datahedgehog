/** Library asset:datahedgehog_monitor/lib/lib/services/raw_keyboard_fuschia.dart */
import {is,isNot,equals} from "@dart2ts/dart/_common";
import {defaultConstructor,namedConstructor,namedFactory,defaultFactory,DartClass,Implements,With,op,Op,OperatorMethods,DartClassAnnotation,DartMethodAnnotation,DartPropertyAnnotation,Abstract,AbstractProperty,int,bool,double,Omit} from "@dart2ts/dart/utils";
import * as _common from "@dart2ts/dart/_common";
import * as core from "@dart2ts/dart/core";
import * as async from "@dart2ts/dart/async";
import * as lib3 from "./raw_keyboard";
import * as lib4 from "./keyboard_key";
import * as lib5 from "@dart2ts.packages/flutter/lib/src/foundation/constants";
import * as lib6 from "./keyboard_maps";

export namespace RawKeyEventDataFuchsia {
    export type Constructors = lib3.RawKeyEventData.Constructors | 'RawKeyEventDataFuchsia';
    export type Interface = Omit<RawKeyEventDataFuchsia, Constructors>;
}
@DartClass
export class RawKeyEventDataFuchsia extends lib3.RawKeyEventData {
    constructor(_namedArguments? : {hidUsage? : number,codePoint? : number,modifiers? : number}) {
        // @ts-ignore
        super();
    }
    @defaultConstructor
    RawKeyEventDataFuchsia(_namedArguments? : {hidUsage? : number,codePoint? : number,modifiers? : number}) {
        let {hidUsage,codePoint,modifiers} = Object.assign({
            "hidUsage" : 0,
            "codePoint" : 0,
            "modifiers" : 0}, _namedArguments );
        this.assert = assert;
        this.hidUsage = hidUsage;
        this.codePoint = codePoint;
        this.modifiers = modifiers;
    }
     : any;

     : any;

     : any;

    hidUsage : number;

    codePoint : number;

    modifiers : number;

    @DartMethodAnnotation({
        library : 'dart:core',type : 'override',value : {
            arguments : [],namedArguments : {
            }}})
    get keyLabel() : string {
        return this.codePoint == 0 ? null : new core.DartString(string).fromCharCode(this.codePoint);
    }
    @DartMethodAnnotation({
        library : 'dart:core',type : 'override',value : {
            arguments : [],namedArguments : {
            }}})
    get logicalKey() : lib4.LogicalKeyboardKey {
        if (this.codePoint != 0) {
            return lib4.LogicalKeyboardKey(lib4.LogicalKeyboardKey.unicodePlane | this.codePoint & lib4.LogicalKeyboardKey.valueMask,{
                keyLabel : this.keyLabel,debugName : lib5.properties.kReleaseMode ? null : `Key ${this.keyLabel}`});
        }
        let newKey : lib4.LogicalKeyboardKey = lib6.properties.kFuchsiaToLogicalKey.get(this.hidUsage | lib4.LogicalKeyboardKey.hidPlane);
        if (newKey != null) {
            return newKey;
        }
        let fuchsiaKeyIdPlane : number = 12884901888;
        newKey = ( newKey ) || ( lib4.LogicalKeyboardKey(fuchsiaKeyIdPlane | this.hidUsage | lib4.LogicalKeyboardKey.autogeneratedMask,{
            debugName : lib5.properties.kReleaseMode ? null : `Ephemeral Fuchsia key code ${this.hidUsage}`}) );
        return newKey;
    }
    @DartMethodAnnotation({
        library : 'dart:core',type : 'override',value : {
            arguments : [],namedArguments : {
            }}})
    get physicalKey() : lib4.PhysicalKeyboardKey {
        return (lib6.properties.kFuchsiaToPhysicalKey.get(this.hidUsage) || lib4.PhysicalKeyboardKey.none);
    }
    _isLeftRightModifierPressed(side : lib3.KeyboardSide,anyMask : number,leftMask : number,rightMask : number) : boolean {
        if (this.modifiers & anyMask == 0) {
            return false;
        }
        switch (side) {
            case lib3.KeyboardSide.any:
                return true;
            case lib3.KeyboardSide.all:
                return this.modifiers & leftMask != 0 && this.modifiers & rightMask != 0;
            case lib3.KeyboardSide.left:
                return this.modifiers & leftMask != 0;
            case lib3.KeyboardSide.right:
                return this.modifiers & rightMask != 0;
        }
        return false;
    }
    @DartMethodAnnotation({
        library : 'dart:core',type : 'override',value : {
            arguments : [],namedArguments : {
            }}})
    isModifierPressed(key : lib3.ModifierKey,_namedArguments? : {side? : lib3.KeyboardSide}) : boolean {
        let {side} = Object.assign({
            "side" : lib3.KeyboardSide.any}, _namedArguments );
        /* TODO (AssertStatementImpl) : assert (side != null); */;
        switch (key) {
            case lib3.ModifierKey.controlModifier:
                return this._isLeftRightModifierPressed(side,RawKeyEventDataFuchsia.modifierControl,RawKeyEventDataFuchsia.modifierLeftControl,RawKeyEventDataFuchsia.modifierRightControl);
            case lib3.ModifierKey.shiftModifier:
                return this._isLeftRightModifierPressed(side,RawKeyEventDataFuchsia.modifierShift,RawKeyEventDataFuchsia.modifierLeftShift,RawKeyEventDataFuchsia.modifierRightShift);
            case lib3.ModifierKey.altModifier:
                return this._isLeftRightModifierPressed(side,RawKeyEventDataFuchsia.modifierAlt,RawKeyEventDataFuchsia.modifierLeftAlt,RawKeyEventDataFuchsia.modifierRightAlt);
            case lib3.ModifierKey.metaModifier:
                return this._isLeftRightModifierPressed(side,RawKeyEventDataFuchsia.modifierMeta,RawKeyEventDataFuchsia.modifierLeftMeta,RawKeyEventDataFuchsia.modifierRightMeta);
            case lib3.ModifierKey.capsLockModifier:
                return this.modifiers & RawKeyEventDataFuchsia.modifierCapsLock != 0;
            case lib3.ModifierKey.numLockModifier:
            case lib3.ModifierKey.scrollLockModifier:
            case lib3.ModifierKey.functionModifier:
            case lib3.ModifierKey.symbolModifier:
                return false;
        }
        return false;
    }
    @DartMethodAnnotation({
        library : 'dart:core',type : 'override',value : {
            arguments : [],namedArguments : {
            }}})
    getModifierSide(key : lib3.ModifierKey) : lib3.KeyboardSide {
        var findSide : (leftMask : number,rightMask : number,combinedMask : number) => lib3.KeyboardSide = (leftMask : number,rightMask : number,combinedMask : number) : lib3.KeyboardSide =>  {
            let combined : number = this.modifiers & combinedMask;
            if (combined == leftMask) {
                return lib3.KeyboardSide.left;
            }else if (combined == rightMask) {
                return lib3.KeyboardSide.right;
            }else if (combined == combinedMask) {
                return lib3.KeyboardSide.all;
            }
            return null;
        };
        switch (key) {
            case lib3.ModifierKey.controlModifier:
                return findSide(RawKeyEventDataFuchsia.modifierLeftControl,RawKeyEventDataFuchsia.modifierRightControl,RawKeyEventDataFuchsia.modifierControl);
            case lib3.ModifierKey.shiftModifier:
                return findSide(RawKeyEventDataFuchsia.modifierLeftShift,RawKeyEventDataFuchsia.modifierRightShift,RawKeyEventDataFuchsia.modifierShift);
            case lib3.ModifierKey.altModifier:
                return findSide(RawKeyEventDataFuchsia.modifierLeftAlt,RawKeyEventDataFuchsia.modifierRightAlt,RawKeyEventDataFuchsia.modifierAlt);
            case lib3.ModifierKey.metaModifier:
                return findSide(RawKeyEventDataFuchsia.modifierLeftMeta,RawKeyEventDataFuchsia.modifierRightMeta,RawKeyEventDataFuchsia.modifierMeta);
            case lib3.ModifierKey.capsLockModifier:
                return (this.modifiers & RawKeyEventDataFuchsia.modifierCapsLock == 0) ? null : lib3.KeyboardSide.all;
            case lib3.ModifierKey.numLockModifier:
            case lib3.ModifierKey.scrollLockModifier:
            case lib3.ModifierKey.functionModifier:
            case lib3.ModifierKey.symbolModifier:
                return null;
        }
        /* TODO (AssertStatementImpl) : assert (false, 'Not handling $key type properly.'); */;
        return null;
    }
    private static __$modifierNone : number;
    static get modifierNone() : number { 
        if (this.__$modifierNone===undefined) {
            this.__$modifierNone = 0;
        }
        return this.__$modifierNone;
    }

    private static __$modifierCapsLock : number;
    static get modifierCapsLock() : number { 
        if (this.__$modifierCapsLock===undefined) {
            this.__$modifierCapsLock = 1;
        }
        return this.__$modifierCapsLock;
    }

    private static __$modifierLeftShift : number;
    static get modifierLeftShift() : number { 
        if (this.__$modifierLeftShift===undefined) {
            this.__$modifierLeftShift = 2;
        }
        return this.__$modifierLeftShift;
    }

    private static __$modifierRightShift : number;
    static get modifierRightShift() : number { 
        if (this.__$modifierRightShift===undefined) {
            this.__$modifierRightShift = 4;
        }
        return this.__$modifierRightShift;
    }

    private static __$modifierShift : number;
    static get modifierShift() : number { 
        if (this.__$modifierShift===undefined) {
            this.__$modifierShift = RawKeyEventDataFuchsia.modifierLeftShift | RawKeyEventDataFuchsia.modifierRightShift;
        }
        return this.__$modifierShift;
    }

    private static __$modifierLeftControl : number;
    static get modifierLeftControl() : number { 
        if (this.__$modifierLeftControl===undefined) {
            this.__$modifierLeftControl = 8;
        }
        return this.__$modifierLeftControl;
    }

    private static __$modifierRightControl : number;
    static get modifierRightControl() : number { 
        if (this.__$modifierRightControl===undefined) {
            this.__$modifierRightControl = 16;
        }
        return this.__$modifierRightControl;
    }

    private static __$modifierControl : number;
    static get modifierControl() : number { 
        if (this.__$modifierControl===undefined) {
            this.__$modifierControl = RawKeyEventDataFuchsia.modifierLeftControl | RawKeyEventDataFuchsia.modifierRightControl;
        }
        return this.__$modifierControl;
    }

    private static __$modifierLeftAlt : number;
    static get modifierLeftAlt() : number { 
        if (this.__$modifierLeftAlt===undefined) {
            this.__$modifierLeftAlt = 32;
        }
        return this.__$modifierLeftAlt;
    }

    private static __$modifierRightAlt : number;
    static get modifierRightAlt() : number { 
        if (this.__$modifierRightAlt===undefined) {
            this.__$modifierRightAlt = 64;
        }
        return this.__$modifierRightAlt;
    }

    private static __$modifierAlt : number;
    static get modifierAlt() : number { 
        if (this.__$modifierAlt===undefined) {
            this.__$modifierAlt = RawKeyEventDataFuchsia.modifierLeftAlt | RawKeyEventDataFuchsia.modifierRightAlt;
        }
        return this.__$modifierAlt;
    }

    private static __$modifierLeftMeta : number;
    static get modifierLeftMeta() : number { 
        if (this.__$modifierLeftMeta===undefined) {
            this.__$modifierLeftMeta = 128;
        }
        return this.__$modifierLeftMeta;
    }

    private static __$modifierRightMeta : number;
    static get modifierRightMeta() : number { 
        if (this.__$modifierRightMeta===undefined) {
            this.__$modifierRightMeta = 256;
        }
        return this.__$modifierRightMeta;
    }

    private static __$modifierMeta : number;
    static get modifierMeta() : number { 
        if (this.__$modifierMeta===undefined) {
            this.__$modifierMeta = RawKeyEventDataFuchsia.modifierLeftMeta | RawKeyEventDataFuchsia.modifierRightMeta;
        }
        return this.__$modifierMeta;
    }

    @DartMethodAnnotation({
        library : 'dart:core',type : 'override',value : {
            arguments : [],namedArguments : {
            }}})
    toString() : string {
        return `${this.runtimeType}(hidUsage: ${this.hidUsage}, codePoint: ${this.codePoint}, modifiers: ${this.modifiers}, ` + `modifiers down: ${this.modifiersPressed})`;
    }
}

export class properties {
}
