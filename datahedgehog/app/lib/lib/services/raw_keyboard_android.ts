/** Library asset:datahedgehog_monitor/lib/lib/services/raw_keyboard_android.dart */
import {is,isNot,equals} from "@dart2ts/dart/_common";
import {defaultConstructor,namedConstructor,namedFactory,defaultFactory,DartClass,Implements,With,op,Op,OperatorMethods,DartClassAnnotation,DartMethodAnnotation,DartPropertyAnnotation,Abstract,AbstractProperty,int,bool,double,Omit} from "@dart2ts/dart/utils";
import * as _common from "@dart2ts/dart/_common";
import * as core from "@dart2ts/dart/core";
import * as async from "@dart2ts/dart/async";
import * as lib3 from "./raw_keyboard";
import * as lib4 from "./keyboard_maps";
import * as lib5 from "./keyboard_key";
import * as lib6 from "@dart2ts.packages/flutter/lib/src/foundation/constants";

export namespace RawKeyEventDataAndroid {
    export type Constructors = lib3.RawKeyEventData.Constructors | 'RawKeyEventDataAndroid';
    export type Interface = Omit<RawKeyEventDataAndroid, Constructors>;
}
@DartClass
export class RawKeyEventDataAndroid extends lib3.RawKeyEventData {
    constructor(_namedArguments? : {flags? : number,codePoint? : number,plainCodePoint? : number,keyCode? : number,scanCode? : number,metaState? : number}) {
        // @ts-ignore
        super();
    }
    @defaultConstructor
    RawKeyEventDataAndroid(_namedArguments? : {flags? : number,codePoint? : number,plainCodePoint? : number,keyCode? : number,scanCode? : number,metaState? : number}) {
        let {flags,codePoint,plainCodePoint,keyCode,scanCode,metaState} = Object.assign({
            "flags" : 0,
            "codePoint" : 0,
            "plainCodePoint" : 0,
            "keyCode" : 0,
            "scanCode" : 0,
            "metaState" : 0}, _namedArguments );
        this.assert = assert;
        this.flags = flags;
        this.codePoint = codePoint;
        this.plainCodePoint = plainCodePoint;
        this.keyCode = keyCode;
        this.scanCode = scanCode;
        this.metaState = metaState;
    }
     : any;

     : any;

     : any;

     : any;

     : any;

    flags : number;

    codePoint : number;

    plainCodePoint : number;

    keyCode : number;

    scanCode : number;

    metaState : number;

    @DartMethodAnnotation({
        library : 'dart:core',type : 'override',value : {
            arguments : [],namedArguments : {
            }}})
    get keyLabel() : string {
        return this.plainCodePoint == 0 ? null : new core.DartString(string).fromCharCode(this.plainCodePoint & properties._kCombiningCharacterMask);
    }
    @DartMethodAnnotation({
        library : 'dart:core',type : 'override',value : {
            arguments : [],namedArguments : {
            }}})
    get physicalKey() : lib5.PhysicalKeyboardKey {
        return (lib4.properties.kAndroidToPhysicalKey.get(this.scanCode) || lib5.PhysicalKeyboardKey.none);
    }
    @DartMethodAnnotation({
        library : 'dart:core',type : 'override',value : {
            arguments : [],namedArguments : {
            }}})
    get logicalKey() : lib5.LogicalKeyboardKey {
        let numPadKey : lib5.LogicalKeyboardKey = lib4.properties.kAndroidNumPadMap.get(this.keyCode);
        if (numPadKey != null) {
            return numPadKey;
        }
        if (this.keyLabel != null && new core.DartString(this.keyLabel).isNotEmpty && !lib5.LogicalKeyboardKey.isControlCharacter(this.keyLabel)) {
            let combinedCodePoint : number = this.plainCodePoint & properties._kCombiningCharacterMask;
            let keyId : number = lib5.LogicalKeyboardKey.unicodePlane | (combinedCodePoint & lib5.LogicalKeyboardKey.valueMask);
            return (lib5.LogicalKeyboardKey.findKeyByKeyId(keyId) || lib5.LogicalKeyboardKey(keyId,{
                keyLabel : this.keyLabel,debugName : lib6.properties.kReleaseMode ? null : `Key ${new core.DartString(this.keyLabel).toUpperCase()}`}));
        }
        let newKey : lib5.LogicalKeyboardKey = lib4.properties.kAndroidToLogicalKey.get(this.keyCode);
        if (newKey != null) {
            return newKey;
        }
        let androidKeyIdPlane : number = 8589934592;
        newKey = ( newKey ) || ( lib5.LogicalKeyboardKey(androidKeyIdPlane | this.keyCode | lib5.LogicalKeyboardKey.autogeneratedMask,{
            debugName : lib6.properties.kReleaseMode ? null : `Unknown Android key code ${this.keyCode}`}) );
        return newKey;
    }
    _isLeftRightModifierPressed(side : lib3.KeyboardSide,anyMask : number,leftMask : number,rightMask : number) : boolean {
        if (this.metaState & anyMask == 0) {
            return false;
        }
        switch (side) {
            case lib3.KeyboardSide.any:
                return true;
            case lib3.KeyboardSide.all:
                return this.metaState & leftMask != 0 && this.metaState & rightMask != 0;
            case lib3.KeyboardSide.left:
                return this.metaState & leftMask != 0;
            case lib3.KeyboardSide.right:
                return this.metaState & rightMask != 0;
        }
        return false;
    }
    @DartMethodAnnotation({
        library : 'dart:core',type : 'override',value : {
            arguments : [],namedArguments : {
            }}})
    isModifierPressed(key : lib3.ModifierKey,_namedArguments? : {side? : lib3.KeyboardSide}) : boolean {
        let {side} = Object.assign({
            "side" : lib3.KeyboardSide.any}, _namedArguments );
        /* TODO (AssertStatementImpl) : assert (side != null); */;
        switch (key) {
            case lib3.ModifierKey.controlModifier:
                return this._isLeftRightModifierPressed(side,RawKeyEventDataAndroid.modifierControl,RawKeyEventDataAndroid.modifierLeftControl,RawKeyEventDataAndroid.modifierRightControl);
            case lib3.ModifierKey.shiftModifier:
                return this._isLeftRightModifierPressed(side,RawKeyEventDataAndroid.modifierShift,RawKeyEventDataAndroid.modifierLeftShift,RawKeyEventDataAndroid.modifierRightShift);
            case lib3.ModifierKey.altModifier:
                return this._isLeftRightModifierPressed(side,RawKeyEventDataAndroid.modifierAlt,RawKeyEventDataAndroid.modifierLeftAlt,RawKeyEventDataAndroid.modifierRightAlt);
            case lib3.ModifierKey.metaModifier:
                return this._isLeftRightModifierPressed(side,RawKeyEventDataAndroid.modifierMeta,RawKeyEventDataAndroid.modifierLeftMeta,RawKeyEventDataAndroid.modifierRightMeta);
            case lib3.ModifierKey.capsLockModifier:
                return this.metaState & RawKeyEventDataAndroid.modifierCapsLock != 0;
            case lib3.ModifierKey.numLockModifier:
                return this.metaState & RawKeyEventDataAndroid.modifierNumLock != 0;
            case lib3.ModifierKey.scrollLockModifier:
                return this.metaState & RawKeyEventDataAndroid.modifierScrollLock != 0;
            case lib3.ModifierKey.functionModifier:
                return this.metaState & RawKeyEventDataAndroid.modifierFunction != 0;
            case lib3.ModifierKey.symbolModifier:
                return this.metaState & RawKeyEventDataAndroid.modifierSym != 0;
        }
        return false;
    }
    @DartMethodAnnotation({
        library : 'dart:core',type : 'override',value : {
            arguments : [],namedArguments : {
            }}})
    getModifierSide(key : lib3.ModifierKey) : lib3.KeyboardSide {
        var findSide : (leftMask : number,rightMask : number) => lib3.KeyboardSide = (leftMask : number,rightMask : number) : lib3.KeyboardSide =>  {
            let combinedMask : number = leftMask | rightMask;
            let combined : number = this.metaState & combinedMask;
            if (combined == leftMask) {
                return lib3.KeyboardSide.left;
            }else if (combined == rightMask) {
                return lib3.KeyboardSide.right;
            }else if (combined == combinedMask) {
                return lib3.KeyboardSide.all;
            }
            return null;
        };
        switch (key) {
            case lib3.ModifierKey.controlModifier:
                return findSide(RawKeyEventDataAndroid.modifierLeftControl,RawKeyEventDataAndroid.modifierRightControl);
            case lib3.ModifierKey.shiftModifier:
                return findSide(RawKeyEventDataAndroid.modifierLeftShift,RawKeyEventDataAndroid.modifierRightShift);
            case lib3.ModifierKey.altModifier:
                return findSide(RawKeyEventDataAndroid.modifierLeftAlt,RawKeyEventDataAndroid.modifierRightAlt);
            case lib3.ModifierKey.metaModifier:
                return findSide(RawKeyEventDataAndroid.modifierLeftMeta,RawKeyEventDataAndroid.modifierRightMeta);
            case lib3.ModifierKey.capsLockModifier:
            case lib3.ModifierKey.numLockModifier:
            case lib3.ModifierKey.scrollLockModifier:
            case lib3.ModifierKey.functionModifier:
            case lib3.ModifierKey.symbolModifier:
                return lib3.KeyboardSide.all;
        }
        /* TODO (AssertStatementImpl) : assert (false, 'Not handling $key type properly.'); */;
        return null;
    }
    private static __$modifierNone : number;
    static get modifierNone() : number { 
        if (this.__$modifierNone===undefined) {
            this.__$modifierNone = 0;
        }
        return this.__$modifierNone;
    }

    private static __$modifierAlt : number;
    static get modifierAlt() : number { 
        if (this.__$modifierAlt===undefined) {
            this.__$modifierAlt = 2;
        }
        return this.__$modifierAlt;
    }

    private static __$modifierLeftAlt : number;
    static get modifierLeftAlt() : number { 
        if (this.__$modifierLeftAlt===undefined) {
            this.__$modifierLeftAlt = 16;
        }
        return this.__$modifierLeftAlt;
    }

    private static __$modifierRightAlt : number;
    static get modifierRightAlt() : number { 
        if (this.__$modifierRightAlt===undefined) {
            this.__$modifierRightAlt = 32;
        }
        return this.__$modifierRightAlt;
    }

    private static __$modifierShift : number;
    static get modifierShift() : number { 
        if (this.__$modifierShift===undefined) {
            this.__$modifierShift = 1;
        }
        return this.__$modifierShift;
    }

    private static __$modifierLeftShift : number;
    static get modifierLeftShift() : number { 
        if (this.__$modifierLeftShift===undefined) {
            this.__$modifierLeftShift = 64;
        }
        return this.__$modifierLeftShift;
    }

    private static __$modifierRightShift : number;
    static get modifierRightShift() : number { 
        if (this.__$modifierRightShift===undefined) {
            this.__$modifierRightShift = 128;
        }
        return this.__$modifierRightShift;
    }

    private static __$modifierSym : number;
    static get modifierSym() : number { 
        if (this.__$modifierSym===undefined) {
            this.__$modifierSym = 4;
        }
        return this.__$modifierSym;
    }

    private static __$modifierFunction : number;
    static get modifierFunction() : number { 
        if (this.__$modifierFunction===undefined) {
            this.__$modifierFunction = 8;
        }
        return this.__$modifierFunction;
    }

    private static __$modifierControl : number;
    static get modifierControl() : number { 
        if (this.__$modifierControl===undefined) {
            this.__$modifierControl = 4096;
        }
        return this.__$modifierControl;
    }

    private static __$modifierLeftControl : number;
    static get modifierLeftControl() : number { 
        if (this.__$modifierLeftControl===undefined) {
            this.__$modifierLeftControl = 8192;
        }
        return this.__$modifierLeftControl;
    }

    private static __$modifierRightControl : number;
    static get modifierRightControl() : number { 
        if (this.__$modifierRightControl===undefined) {
            this.__$modifierRightControl = 16384;
        }
        return this.__$modifierRightControl;
    }

    private static __$modifierMeta : number;
    static get modifierMeta() : number { 
        if (this.__$modifierMeta===undefined) {
            this.__$modifierMeta = 65536;
        }
        return this.__$modifierMeta;
    }

    private static __$modifierLeftMeta : number;
    static get modifierLeftMeta() : number { 
        if (this.__$modifierLeftMeta===undefined) {
            this.__$modifierLeftMeta = 131072;
        }
        return this.__$modifierLeftMeta;
    }

    private static __$modifierRightMeta : number;
    static get modifierRightMeta() : number { 
        if (this.__$modifierRightMeta===undefined) {
            this.__$modifierRightMeta = 262144;
        }
        return this.__$modifierRightMeta;
    }

    private static __$modifierCapsLock : number;
    static get modifierCapsLock() : number { 
        if (this.__$modifierCapsLock===undefined) {
            this.__$modifierCapsLock = 1048576;
        }
        return this.__$modifierCapsLock;
    }

    private static __$modifierNumLock : number;
    static get modifierNumLock() : number { 
        if (this.__$modifierNumLock===undefined) {
            this.__$modifierNumLock = 2097152;
        }
        return this.__$modifierNumLock;
    }

    private static __$modifierScrollLock : number;
    static get modifierScrollLock() : number { 
        if (this.__$modifierScrollLock===undefined) {
            this.__$modifierScrollLock = 4194304;
        }
        return this.__$modifierScrollLock;
    }

    @DartMethodAnnotation({
        library : 'dart:core',type : 'override',value : {
            arguments : [],namedArguments : {
            }}})
    toString() : string {
        return `${this.runtimeType}(keyLabel: ${this.keyLabel} flags: ${this.flags}, codePoint: ${this.codePoint}, ` + `keyCode: ${this.keyCode}, scanCode: ${this.scanCode}, metaState: ${this.metaState}, ` + `modifiers down: ${this.modifiersPressed})`;
    }
}

export class properties {
    private static __$_kCombiningCharacterMask : number;
    static get _kCombiningCharacterMask() : number { 
        if (this.__$_kCombiningCharacterMask===undefined) {
            this.__$_kCombiningCharacterMask = 2147483647;
        }
        return this.__$_kCombiningCharacterMask;
    }
    static set _kCombiningCharacterMask(__$value : number)  { 
        this.__$_kCombiningCharacterMask = __$value;
    }

}
