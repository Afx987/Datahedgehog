# Copyright (c) 2017, the Dart project authors. Please see the AUTHORS file
# for details. All rights reserved. Use of this source code is governed by a
# BSD-style license that can be found in the LICENSE.md file.

# Status file for the strong_test.dart test suite. This is testing generating
# Kernel ASTs directly, that is, code in pkg/fasta/lib/src/kernel/ with
# strong-mode enabled.

DeltaBlue: Fail
accessors: Fail
arithmetic: Fail
async_function: Fail
await: Fail
bad_store: Fail
call: Fail
cascade: Fail
casts: Fail
classes: Fail
closure: Fail
covariant_generic: Fail
cycles: Fail
default_values: Fail
escape: Fail
expressions: Fail
external: Fail
fallthrough: Fail
fibonacci: Fail
for_in_scope: Fail
function_in_field: Fail
function_type_recovery: Fail
functions: Fail
hello: Fail
implicit_this: Fail
invocations: Fail
literals: Fail
map: Fail
micro: Fail
mixin: Fail
named_parameters: Fail
null_aware: Fail
operators: Fail
optional: Fail
override: Fail
platform: Fail
prefer_baseclass: Fail
redirecting_constructor: Fail
redirecting_factory: Fail
statements: Fail
store_load: Fail
stringliteral: Fail
super_rasta_copy: Fail
top_level_accessors: Fail
type_variable_as_super: Fail
typedef: Fail
uninitialized_fields: Fail
unused_methods: Fail
void-methods: Fail

inference/constructors_infer_from_arguments: Fail
inference/constructors_infer_from_arguments_const: Fail
inference/constructors_infer_from_arguments_const_with_upper_bound: Fail
inference/constructors_infer_from_arguments_factory: Fail
inference/constructors_infer_from_arguments_factory_calls_constructor: Fail
inference/constructors_infer_from_arguments_named_factory: Fail
inference/constructors_infer_from_arguments_redirecting: Fail
inference/constructors_infer_from_arguments_redirecting_factory: Fail
inference/constructors_inference_f_bounded: Fail
inference/constructors_reverse_type_parameters: Fail
inference/constructors_too_many_positional_arguments: Fail
inference/downward_inference_fixes_no_upwards_errors: Fail
inference/downward_inference_miscellaneous: Fail
inference/downwards_inference_annotations: Fail
inference/downwards_inference_async_await: Fail
inference/downwards_inference_for_each: Fail
inference/downwards_inference_initializing_formal_default_formal: Fail
inference/downwards_inference_inside_top_level: Fail
inference/downwards_inference_on_function_expressions: Fail
inference/downwards_inference_on_function_of_t_using_the_t: Fail
inference/downwards_inference_on_generic_function_expressions: Fail
inference/downwards_inference_on_list_literals_infer_downwards: Fail
inference/downwards_inference_on_list_literals_infer_if_value_types_match_context: Fail
inference/downwards_inference_on_map_literals: Fail
inference/downwards_inference_yield_yield_star: Fail
inference/future_or_subtyping: Fail
inference/future_then: Fail
inference/future_then_2: Fail
inference/future_then_3: Fail
inference/future_then_4: Fail
inference/future_then_5: Fail
inference/future_then_6: Fail
inference/future_then_conditional: Fail
inference/future_then_conditional_2: Fail
inference/future_then_conditional_3: Fail
inference/future_then_conditional_4: Fail
inference/future_then_conditional_5: Fail
inference/future_then_conditional_6: Fail
inference/future_then_downwards_method_target: Fail
inference/future_then_explicit_future: Fail
inference/future_then_upwards: Fail
inference/future_then_upwards_2: Fail
inference/future_then_upwards_3: Fail
inference/future_then_upwards_from_block: Fail
inference/future_union_async_conditional: Fail
inference/future_union_async_conditional_2: Fail
inference/future_union_downwards: Fail
inference/future_union_downwards_2: Fail
inference/future_union_downwards_3: Fail
inference/future_union_downwards_4: Fail
inference/future_union_downwards_generic_method_with_future_return: Fail
inference/future_union_downwards_generic_method_with_generic_return: Fail
inference/future_union_upwards_generic_methods: Fail
inference/generic_functions_return_typedef: Fail
inference/generic_methods_downwards_inference_fold: Fail
inference/generic_methods_infer_js_builtin: Fail
inference/generic_methods_iterable_and_future: Fail
inference/generic_methods_nested_generic_instantiation: Fail
inference/infer_assign_to_index: Fail
inference/infer_assign_to_property: Fail
inference/infer_assign_to_property_custom: Fail
inference/infer_binary_double_double: Fail
inference/infer_binary_double_int: Fail
inference/infer_binary_int_double: Fail
inference/infer_binary_int_int: Fail
inference/infer_consts_transitively_2: Fail
inference/infer_consts_transitively_2_a: Fail
inference/infer_correctly_on_multiple_variables_declared_together: Fail
inference/infer_from_complex_expressions_if_outer_most_value_is_precise: Fail
inference/infer_from_rhs_only_if_it_wont_conflict_with_overridden_fields: Fail
inference/infer_from_rhs_only_if_it_wont_conflict_with_overridden_fields2: Fail
inference/infer_from_variables_in_cycle_libs_when_flag_is_on: Fail
inference/infer_from_variables_in_cycle_libs_when_flag_is_on2: Fail
inference/infer_from_variables_in_non_cycle_imports_with_flag: Fail
inference/infer_from_variables_in_non_cycle_imports_with_flag2: Fail
inference/infer_list_literal_nested_in_map_literal: Fail
inference/infer_prefix_expression: Fail
inference/infer_statics_transitively: Fail
inference/infer_statics_transitively3: Fail
inference/infer_statics_transitively_a: Fail
inference/infer_statics_with_method_invocations: Fail
inference/infer_type_on_var_from_field: Fail
inference/infer_typed_map_literal: Fail
inference/infer_types_on_generic_instantiations_in_library_cycle: Fail
inference/infer_types_on_loop_indices_for_each_loop: Fail
inference/infer_types_on_loop_indices_for_loop_with_inference: Fail
inference/inferred_nonstatic_field_depends_on_static_field_complex: Fail
inference/inferred_type_cascade: Fail
inference/inferred_type_extract_method_tear_off: Fail
inference/inferred_type_extract_method_tear_off_via_interface: Fail
inference/inferred_type_is_typedef: Fail
inference/inferred_type_is_typedef_parameterized: Fail
inference/inferred_type_uses_synthetic_function_type_named_param: Fail
inference/inferred_type_uses_synthetic_function_type_positional_param: Fail
inference/inferred_type_via_closure_multiple_levels_of_nesting: Fail
inference/lambda_does_not_have_propagated_type_hint: Fail
inference/list_literals_can_infer_null_top_level: Fail
inference/local_constructor_from_arguments: Fail
inference/map_literals: Fail
inference/map_literals_can_infer_null: Fail
inference/map_literals_can_infer_null_top_level: Fail
inference/map_literals_top_level: Fail
inference/method_call_with_type_arguments_static_method: Fail
inference/null_coalescing_operator: Fail
inference/null_coalescing_operator_2: Fail
inference/null_literal_should_not_infer_as_bottom: Fail
inference/propagate_inference_to_field_in_class: Fail
inference/reference_to_typedef: Fail
inference/refine_binary_expression_type_type_parameter_t_double: Fail
inference/refine_binary_expression_type_type_parameter_t_int: Fail
inference/refine_binary_expression_type_type_parameter_t_t: Fail
inference/unsafe_block_closure_inference_closure_call: Fail
inference/unsafe_block_closure_inference_function_call_explicit_dynamic_param_via_expr1: Fail
inference/unsafe_block_closure_inference_function_call_explicit_type_param_via_expr1: Fail
inference/unsafe_block_closure_inference_function_call_implicit_type_param_via_expr: Fail
inference/unsafe_block_closure_inference_function_call_no_type_param_via_expr: Fail
inference/unsafe_block_closure_inference_in_map_dynamic: Fail
inference/unsafe_block_closure_inference_in_map_typed: Fail
inference/unsafe_block_closure_inference_in_map_untyped: Fail
inference/void_return_type_subtypes_dynamic: Fail

rasta/abstract_constructor: Fail
rasta/bad_constructor_redirection: Fail
rasta/bad_continue: Fail
rasta/bad_default_constructor: Fail
rasta/bad_explicit_super_constructor: Fail
rasta/bad_implicit_super_constructor: Fail
rasta/bad_interpolation: Fail
rasta/bad_redirection: Fail
rasta/bad_setter_initializer: Fail
rasta/bad_unicode: Fail
rasta/breaking_bad: Fail
rasta/cascades: Fail
rasta/class_hierarchy: Fail
rasta/class_member: Fail
rasta/constant_get_and_invoke: Fail
rasta/deferred_lib: Fail
rasta/deferred_load: Fail
rasta/duplicated_mixin: Fail
rasta/enum: Fail
rasta/export: Fail
rasta/external_factory_redirection: Fail
rasta/foo: Fail
rasta/for_loop: Fail
rasta/generic_factory: Fail
rasta/hello: Fail
rasta/import_export: Fail
rasta/issue_000001: Fail
rasta/issue_000002: Fail
rasta/issue_000004: Fail
rasta/issue_000006: Fail
rasta/issue_000007: Fail
rasta/issue_000008: Fail
rasta/issue_000011: Fail
rasta/issue_000012: Fail
rasta/issue_000025: Fail
rasta/issue_000026: Fail
rasta/issue_000031: Fail
rasta/issue_000032: Fail
rasta/issue_000033: Fail
rasta/issue_000034: Fail
rasta/issue_000035: Fail
rasta/issue_000035a: Fail
rasta/issue_000036: Fail
rasta/issue_000039: Fail
rasta/issue_000041: Fail
rasta/issue_000042: Fail
rasta/issue_000043: Fail
rasta/issue_000044: Fail
rasta/issue_000045: Fail
rasta/issue_000046: Fail
rasta/issue_000047: Fail
rasta/issue_000048: Fail
rasta/issue_000052: Fail
rasta/issue_000053: Fail
rasta/issue_000067: Fail
rasta/issue_000068: Fail
rasta/issue_000069: Fail
rasta/issue_000070: Fail
rasta/issue_000080: Fail
rasta/issue_000081: Fail
rasta/malformed_const_constructor: Fail
rasta/malformed_function: Fail
rasta/malformed_function_type: Fail
rasta/mandatory_parameter_initializer: Fail
rasta/mixin_library: Fail
rasta/native_is_illegal: Fail
rasta/parser_error: Fail
rasta/previsit_deferred: Fail
rasta/static: Fail
rasta/super: Fail
rasta/super_initializer: Fail
rasta/super_mixin: Fail
rasta/super_operator: Fail
rasta/supports_reflection: VerificationError
rasta/switch_execution_case_t02: Fail
rasta/switch_fall_through: Fail
rasta/this_invoke: Fail
rasta/try_label: Fail
rasta/type_literals: VerificationError
rasta/type_with_parse_error: Fail
rasta/typedef: VerificationError
rasta/unresolved: Fail
rasta/unresolved_constructor: Fail
rasta/unresolved_for_in: Fail
rasta/unresolved_recovery: Fail
rasta/unsupported_platform_library: Fail
