library;
import self as self;
import "dart:core" as core;

class Foo extends core::Object {
  static const field dynamic staticConstant = 42;
  static field dynamic staticField = 42;
  constructor •() → self::Foo
    : super core::Object::•();
  static method staticFunction() → dynamic {}
  static get staticGetter() → dynamic
    return null;
  static set staticSetter(dynamic _) → dynamic {}
}
static method use(dynamic x) → dynamic {
  if(x.==(new core::DateTime::now().millisecondsSinceEpoch))
    throw "Shouldn't happen";
}
static method main() → dynamic {
  self::Foo::staticConstant;
  self::use(self::Foo::staticConstant);
  self::Foo::staticField;
  self::use(self::Foo::staticField);
  self::Foo::staticFunction;
  self::use(self::Foo::staticFunction);
  self::Foo::staticGetter;
  self::use(self::Foo::staticGetter);
  invalid-expression;
  self::use(invalid-expression);
  let final dynamic #t1 = self::Foo::staticConstant.+(1) in invalid-expression;
  self::use(let final dynamic #t2 = self::Foo::staticConstant in let final dynamic #t3 = let final dynamic #t4 = #t2.+(1) in invalid-expression in #t2);
  self::Foo::staticField = self::Foo::staticField.+(1);
  self::use(let final dynamic #t5 = self::Foo::staticField in let final dynamic #t6 = self::Foo::staticField = #t5.+(1) in #t5);
  let final dynamic #t7 = self::Foo::staticFunction.+(1) in invalid-expression;
  self::use(let final dynamic #t8 = self::Foo::staticFunction in let final dynamic #t9 = let final dynamic #t10 = #t8.+(1) in invalid-expression in #t8);
  throw core::_unresolvedStaticSetterError(null, #staticGetter, <dynamic>[self::Foo::staticGetter.+(1)], <dynamic, dynamic>{}, null);
  self::use(let final dynamic #t11 = self::Foo::staticGetter in let final dynamic #t12 = throw core::_unresolvedStaticSetterError(null, #staticGetter, <dynamic>[#t11.+(1)], <dynamic, dynamic>{}, null) in #t11);
  throw core::_unresolvedStaticGetterError(null, #staticSetter, <dynamic>[], <dynamic, dynamic>{}, null);
  self::use(throw core::_unresolvedStaticGetterError(null, #staticSetter, <dynamic>[], <dynamic, dynamic>{}, null));
  let final dynamic #t13 = self::Foo::staticConstant.+(1) in invalid-expression;
  self::use(let final dynamic #t14 = self::Foo::staticConstant.+(1) in invalid-expression);
  self::Foo::staticField = self::Foo::staticField.+(1);
  self::use(self::Foo::staticField = self::Foo::staticField.+(1));
  let final dynamic #t15 = self::Foo::staticFunction.+(1) in invalid-expression;
  self::use(let final dynamic #t16 = self::Foo::staticFunction.+(1) in invalid-expression);
  throw core::_unresolvedStaticSetterError(null, #staticGetter, <dynamic>[self::Foo::staticGetter.+(1)], <dynamic, dynamic>{}, null);
  self::use(throw core::_unresolvedStaticSetterError(null, #staticGetter, <dynamic>[self::Foo::staticGetter.+(1)], <dynamic, dynamic>{}, null));
  throw core::_unresolvedStaticGetterError(null, #staticSetter, <dynamic>[], <dynamic, dynamic>{}, null);
  self::use(throw core::_unresolvedStaticGetterError(null, #staticSetter, <dynamic>[], <dynamic, dynamic>{}, null));
  self::Foo::staticConstant.call();
  self::use(self::Foo::staticConstant.call());
  self::Foo::staticField.call();
  self::use(self::Foo::staticField.call());
  self::Foo::staticFunction();
  self::use(self::Foo::staticFunction());
  self::Foo::staticGetter.call();
  self::use(self::Foo::staticGetter.call());
  invalid-expression.call();
  self::use(invalid-expression.call());
  let final dynamic #t17 = 87 in invalid-expression;
  self::use(let final dynamic #t18 = 87 in invalid-expression);
  self::Foo::staticField = 87;
  self::use(self::Foo::staticField = 87);
  let final dynamic #t19 = 87 in invalid-expression;
  self::use(let final dynamic #t20 = 87 in invalid-expression);
  let final dynamic #t21 = 87 in invalid-expression;
  self::use(let final dynamic #t22 = 87 in invalid-expression);
  self::Foo::staticSetter = 87;
  self::use(self::Foo::staticSetter = 87);
  self::Foo::staticConstant.==(null) ? let final dynamic #t23 = 87 in invalid-expression : null;
  self::use(let final dynamic #t24 = self::Foo::staticConstant in #t24.==(null) ? let final dynamic #t25 = 87 in invalid-expression : #t24);
  self::Foo::staticField.==(null) ? self::Foo::staticField = 87 : null;
  self::use(let final dynamic #t26 = self::Foo::staticField in #t26.==(null) ? self::Foo::staticField = 87 : #t26);
  self::Foo::staticFunction.==(null) ? let final dynamic #t27 = 87 in invalid-expression : null;
  self::use(let final dynamic #t28 = self::Foo::staticFunction in #t28.==(null) ? let final dynamic #t29 = 87 in invalid-expression : #t28);
  self::Foo::staticGetter.==(null) ? throw core::_unresolvedStaticSetterError(null, #staticGetter, <dynamic>[87], <dynamic, dynamic>{}, null) : null;
  self::use(let final dynamic #t30 = self::Foo::staticGetter in #t30.==(null) ? throw core::_unresolvedStaticSetterError(null, #staticGetter, <dynamic>[87], <dynamic, dynamic>{}, null) : #t30);
  throw core::_unresolvedStaticGetterError(null, #staticSetter, <dynamic>[], <dynamic, dynamic>{}, null);
  self::use(throw core::_unresolvedStaticGetterError(null, #staticSetter, <dynamic>[], <dynamic, dynamic>{}, null));
}
