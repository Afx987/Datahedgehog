library test;
import self as self;
import "dart:async" as asy;
import "dart:core" as core;

static method main() → dynamic /* originally async */ {
  final asy::Completer<asy::FutureOr<dynamic>> :completer = asy::Completer::sync<asy::FutureOr<dynamic>>();
  asy::FutureOr<dynamic> :return_value;
  dynamic :async_op_then;
  dynamic :async_op_error;
  dynamic :await_jump_var = 0;
  dynamic :await_ctx_var;
  dynamic :saved_try_context_var0;
  function :async_op([dynamic :result, dynamic :exception, dynamic :stack_trace]) → dynamic yielding 
    try {
      #L1:
      {
        () → asy::Future<core::Null> f = () → asy::Future<core::Null> /* originally async */ {
          final asy::Completer<asy::FutureOr<core::Null>> :completer = asy::Completer::sync<asy::FutureOr<core::Null>>();
          asy::FutureOr<core::Null> :return_value;
          dynamic :async_op_then;
          dynamic :async_op_error;
          dynamic :await_jump_var = 0;
          dynamic :await_ctx_var;
          function :async_op([dynamic :result, dynamic :exception, dynamic :stack_trace]) → dynamic yielding 
            try {
              #L2:
              {
                :return_value = null;
                break #L2;
              }
              :completer.complete(:return_value);
              return;
            }
            on dynamic catch(dynamic :exception, dynamic :stack_trace) {
              :completer.completeError(:exception, :stack_trace);
            }
          :async_op_then = asy::_asyncThenWrapperHelper(:async_op);
          :async_op_error = asy::_asyncErrorWrapperHelper(:async_op);
          asy::Future::microtask<dynamic>(:async_op);
          return :completer.future;
        };
        asy::Future<dynamic> y = f.call();
        asy::Future<core::String> z = f.call();
        asy::_awaitHelper(f.call(), :async_op_then, :async_op_error, :async_op);
        [yield] null;
        core::String s = :result;
      }
      :completer.complete(:return_value);
      return;
    }
    on dynamic catch(dynamic :exception, dynamic :stack_trace) {
      :completer.completeError(:exception, :stack_trace);
    }
  :async_op_then = asy::_asyncThenWrapperHelper(:async_op);
  :async_op_error = asy::_asyncErrorWrapperHelper(:async_op);
  asy::Future::microtask<dynamic>(:async_op);
  return :completer.future;
}
