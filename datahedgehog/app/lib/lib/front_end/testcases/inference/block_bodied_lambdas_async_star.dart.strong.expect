library test;
import self as self;
import "dart:async" as asy;
import "dart:core" as core;

static method main() → dynamic {
  () → asy::Stream<core::num> f = () → asy::Stream<core::num> /* originally async* */ {
    dynamic :controller;
    dynamic :async_op_then;
    dynamic :async_op_error;
    dynamic :await_jump_var = 0;
    dynamic :await_ctx_var;
    dynamic :saved_try_context_var0;
    dynamic :saved_try_context_var1;
    function :async_op([dynamic :result, dynamic :exception, dynamic :stack_trace]) → dynamic yielding 
      try
        try {
          #L1:
          {
            if(:controller.add(1))
              return null;
            else
              [yield] null;
            asy::Stream<core::double> s;
            if(:controller.addStream(s))
              return null;
            else
              [yield] null;
          }
          return;
        }
        on dynamic catch(dynamic :exception, dynamic :stack_trace) {
          :controller.addError(:exception, :stack_trace);
        }
      finally {
        :controller.close();
      }
    :async_op_then = asy::_asyncThenWrapperHelper(:async_op);
    :async_op_error = asy::_asyncErrorWrapperHelper(:async_op);
    :controller = new asy::_AsyncStarStreamController::•(:async_op);
    return :controller.stream;
  };
  asy::Stream<core::num> g = f.call();
  asy::Stream<core::int> h = f.call();
}
