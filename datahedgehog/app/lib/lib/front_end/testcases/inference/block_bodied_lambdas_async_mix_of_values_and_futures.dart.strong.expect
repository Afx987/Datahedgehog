library test;
import self as self;
import "dart:async" as asy;
import "dart:core" as core;
import "dart:math" as math;

static method main() → dynamic {
  () → asy::Future<core::num> f = () → asy::Future<core::num> /* originally async */ {
    final asy::Completer<asy::FutureOr<core::num>> :completer = asy::Completer::sync<asy::FutureOr<core::num>>();
    asy::FutureOr<core::num> :return_value;
    dynamic :async_op_then;
    dynamic :async_op_error;
    dynamic :await_jump_var = 0;
    dynamic :await_ctx_var;
    function :async_op([dynamic :result, dynamic :exception, dynamic :stack_trace]) → dynamic yielding 
      try {
        #L1:
        {
          if(math::Random::•().{math::Random::nextBool}()) {
            :return_value = asy::Future::value<core::int>(1);
            break #L1;
          }
          else {
            :return_value = 2.0;
            break #L1;
          }
        }
        :completer.complete(:return_value);
        return;
      }
      on dynamic catch(dynamic :exception, dynamic :stack_trace) {
        :completer.completeError(:exception, :stack_trace);
      }
    :async_op_then = asy::_asyncThenWrapperHelper(:async_op);
    :async_op_error = asy::_asyncErrorWrapperHelper(:async_op);
    asy::Future::microtask<dynamic>(:async_op);
    return :completer.future;
  };
  asy::Future<core::num> g = f.call();
  asy::Future<core::int> h = f.call();
}
